1. Why are functions advantageous to have in your programs?

Functions make it easier to automate regularly used code blocks so that you do not have to write them over and over again. In addition, when using a function, you can update it once and will then update anywhere that your function is called. 


2. When does the code in a function execute: when the function is defined or when the function is called?

When the function is called. 


3. What statement creates a function?

def function_name():


4. What is the difference between a function and a function call?

A function is generally found at the beginning of your programme and looks like "def function_name():". Here you can define actions that the function takes. A function call is found within your code and looks like "function_name()", and at the point of call runs through the actions defined in the specified function. 


5. How many global scopes are there in a Python program? How many local scopes?

There's typically one global scope and multiple local scopes. 


6. What happens to variables in a local scope when the function call returns?

They're forgotten by the programme. 


7. What is a return value? Can a return value be part of an expression?

Yes, return values can be part of an expression. When creating a function using the def statement, you can specify what the return value should be with a return statement. For example:

def getAnswer(answerNumber):
    if answerNumber == 1:
        return 'It is certain'


8. If a function does not have a return statement, what is the return value of a call to that function?

In Python, if a function does not have a return statement, or if the return statement does not explicitly specify a value, the function returns None by default.


9. How can you force a variable in a function to refer to the global variable?

You put "global" before the function name, for example:

def function_name():
    global eggs


10. What is the data type of None?

The None value represents the absence of a value. 


11. What does the import areallyourpetsnamederic statement do?

It imports all modules from the areallyourpetsnamederic library.


12. If you had a function named bacon() in a module named spam, how would you call it after importing spam?

spam.library()


13. How can you prevent a program from crashing when it gets an error?

You need to code exceptions into your programme, for example "ZeroDivisionError". 


14. What goes in the try clause? What goes in the except clause?

The "try" clause is for the actions that you would like to perform, and the "except" clause is for troubleshooting possible errors. 


Practice Projects

For practice, write programs to do the following tasks.

The Collatz Sequence

Write a function named collatz() that has one parameter named number. If number is even, then collatz() should print number // 2 and return this value. If number is odd, then collatz() should print and return 3 * number + 1.

Then write a program that lets the user type in an integer and that keeps calling collatz() on that number until the function returns the value 1. (Amazingly enough, this sequence actually works for any integer—sooner or later, using this sequence, you’ll arrive at 1! Even mathematicians aren’t sure why. Your program is exploring what’s called the Collatz sequence, sometimes called “the simplest impossible math problem.”)

Remember to convert the return value from input() to an integer with the int() function; otherwise, it will be a string value.

Hint: An integer number is even if number % 2 == 0, and it’s odd if number % 2 == 1.

The output of this program could look something like this:

Enter number:
3
10
5
16
8
4
2
1

Input Validation
Add try and except statements to the previous project to detect whether the user types in a noninteger string. Normally, the int() function will raise a ValueError error if it is passed a noninteger string, as in int('puppy'). In the except clause, print a message to the user saying they must enter an integer.